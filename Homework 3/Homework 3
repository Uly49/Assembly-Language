###################################################################
#Program 2
#This program will translate machine code and print the output
#Author: Ulysses Palomar
###################################################################
	.data
hexcode:.word	0x003100b3,0x3e813083,0x3e113423,0
parsed:	.space	100
header1:.asciiz	"The following machine code will be translated: 0x003100b3\n"
header2:.asciiz	"The following machine code will be translated: 0x3e813083\n"
header3:.asciiz	"The following machine code will be translated: 0x3e113423\n"
rformat:.asciiz	"R-format "
iformat:.asciiz	"I-format "
sformat:.asciiz	"S-format "
nwline:	.asciiz	"\n"

	.globl	main
		.text
main:

	la	$t1,hexcode	#$s1 = hexcode address
	
	lw	$a0,hexcode	#Load hexcode to $a0
	la	$a1,parsed	#Load first address of parsed to $a1
	jal	Decode
	
loop:
	lw	$s1,0($t1)	#Load word in $t1 into $s1
	addi	$s1,$s1,4	#Add 4 to $s1
	beq	$s1,$zero,exit	#
	
	la	$a0,($t1)	#Load contents of $t1 into $a0
	sw	$a0, -4($sp)
	jal	PrtFormat

exit:
	li	$v0,10		#$v0 = 10	#Set $v0 to terminate
	syscall			#Execute

##########################################
#  Decode_Instruction(short instruction):  Saves off into a Parsed table the opcode, the source 
#  register number, the destination register number and the immediate value.  These fields can be 
#  accessed any time by any routine.
#  Calling Sequence:
#	lw    	$a0,instruct	# instruction to parse
#	la	$a1,Parsed	# address of array to parse to
#	jal	Decode
#  
#  Returns: A completed Parsed array  (No return parameters)
#
#  Stack Usage:  (You specify, minimally include:)
#			Return Address
##########################################
Decode:
	
	move	$t1,$a0		#Move $a0 (hexcode) into $t1
	move	$s1,$a1		#Move $a1 (parsed table) into $s1
	
	andi	$t2,$t1,0x33
	beq	$t2,0x33,Rinst
	
	andi	$t3,$t1,0x13
	beq	$t3,0x13,Iinst
	
	andi	$t4,$t1,0x23
	beq	$t4,0x23,Sinst
	
	andi	$t5,$t1,0x03
	beq	$t5,0x03,Iinst
	
	
Rinst:
	
	li	$v0,4		#$v0 = 4	#Set $v0 to print string
	la	$a0,rformat	#$a0 = rformat	#Set $a0 to print rformat
	syscall			#Execute
	
	addi	$t7,$zero,0	#Index $t7 = 0
	
	sw	$t2,parsed($t7)
	
	srl	$t2,$t1,7	#Get rid of opcode by shifting right 7 bits (opcode size)
	andi	$t2,$t2,0x1f	#$t1 = $t1 ANDI 0x31	#Isolate RD by removing bits to the left of RD

	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute

	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t1	#Move contents of $t1 into $v0
	syscall			#Execute

	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute

	srl	$t2,$t1,15	#Get rid of RD and func3 by shifting right 15 bits (Opcode, RD, and Func3 size)
	andi	$t2,$t2,0x1f	#$t2 = $t2 ANDI 0x1f	#Isolate RS by removing bits to the left of RS

	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t2	#Move contents of $t2 into $v0
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute
	
	srl	$t2,$t1,20	#Get rid of Opcode, RD, Func3, and RS1 by shifting right 9 bits (Opcode, RD, Func3, 
				#and RS1 size)
	andi	$t2,$t2,0x1f	#$t3 = $t3 ANDI 0x1f	#Isolate RS by removing bits to the left of RS
	
	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t3	#Move contents of $t3 into $v0
	syscall			#Execute
	
	li	$v0,4		#$v0 = 34	#Set $vo to print string
	la	$a0,nwline	#$a0 = nwline	#Set $a0 to print nwline
	syscall			#Execute
	
	b	loop		#Branch to loop

Iinst:

	li	$v0,4		#$v0 = 4	#Set $v0 to print string
	la	$a0,iformat	#$a0 = iformat	#Set $a0 to print iformat
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	srl	$t2,$t1,7	#Get rid of opcode by shifting right 7 bits (opcode size)
	andi	$t2,$t2,0x1f	#$t1 = $t1 ANDI 0x1f	#Isolate RD by removing bits to the left of RD
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t1	#Move contents of $t1 into $v0
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute

	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	srl	$t2,$t1,15	#Get rid of RD and func3 by shifting right 15 bits (Opcode, RD, and Func3 size)
	andi	$t2,$t2,0x1f	#$t2 = $t2 ANDI 0x1f	#Isolate RS by removing bits to the left of RS
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t2	#Move contents of $t2 into $v0
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute
	
	srl	$t2,$t1,20	#Get rid of Opcode, RD, Func3, and RS1 by shifting right 20 bits (Opcode, RD, Func3, 
				#and RS1 size)
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t3	#Move contents of $t3 into $v0
	syscall			#Execute
	
	li	$v0,4		#$v0 = 4	#Set $vo to print string
	la	$a0,nwline	#$a0 = nwline	#Set $a0 to print nwline
	syscall			#Execute
	
	b	loop		#Branch to loop
	
Sinst:

	li	$v0,4		#$v0 = 4	#Set $v0 to print string
	la	$a0,sformat	#$a0 = sformat	#Set $a0 to print sformat
	syscall			#Execute

	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	srl	$t2,$t1,20	#Get rid of RS1, Func3, Immediate, and Opcode by shifting right 20 bits (RS1, Func3, 
				#Immediate, and Opcode size)
	andi	$t2,$t2,0x1f	#$t1 = $t1 ANDI 0x1f	#Isolate RS2 by removing bits to the left of RS2
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t1	#Move contents of $t1 into $v0
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	srl	$t2,$t1,15	#Get rid of Func3, Immediate, and Opcode by shifting right 15 bits (Func3, Immediate, 
				#and Opcode size)
	andi	$t2,$t2,0x1f	#$t2 = $t2 ANDI 0x1f	#Isolate RS1 by removing bits to the left of RS1

	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t2		#$a0 = $t2	#Move contents of $t2 into $v0
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute
	
	srl	$t3,$t1,7	#Get rid of Opcode by shifting right 7 bits (Opcode size)
	andi	$t3,$t3,0x1f	#$t3 = $t3 ANDI 0x1f	#Isolate right Immediate by removing bits to the left
	
	srl	$t4,$t1,20	#Get rid of RS1, Func3, right Immediate, and Opcode by shifting right 20 bits (size 
				#of all of them)
	andi	$t4,$t4,0x3e0	#$t4 = $t4 ANDI 0x3e0	#Isolate left Immediate leaving space to add right Immediate 
							#by removing bits to the right of RS2
	add	$t5,$t3,$t4	#$t5 = $t3 + $t5	#Add right Immediate with left Immediate
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	move	$a0,$t5		#$a0 = $t5	#Move contents of $t5 into $v0
	syscall			#Execute
	
	li	$v0,4		#$v0 = 34	#Set $vo to print string
	la	$a0,nwline	#$a0 = nwline	#Set $a0 to print nwline
	syscall			#Execute

	b	loop		#Branch to loop




##########################################
#  Print_Reg_Num(int reg_num):  Prints a ‘x’, a register number, and a space.  Used when 
#  printing the instruction.
#  Calling Sequence:
#	lw    	$a0,reg_num
#	jal	PrReg
#
#  Returns: nothing; Output: The routine prints:  xn
#
#  Stack Usage:  (You specify, minimally include:)
#	0($sp) = Return Address
#	4($sp) = reg_num
##########################################
Print_Reg_Num:
	addi	$sp,$sp,-8	#Allocate 4 bits to stack
	sw	$ra,0($sp)	#Save Return Address to 0($sp)
	sw	$a0,4($sp)	#Save reg_num to 4($sp)
	
	li	$v0,11		#$v0 = 11	#Set $v0 to print character
	li	$a0,'x'		#$a0 = 'x'	#Set $a0 to print 'x'
	syscall			#Execute
	
	li	$v0,36		#$v0 = 36	#Set $vo to print number in decimal
	la	$a0,4($sp)	#Load reg_num from stack onto $a0 to print
	syscall			#Execute
	
	li	$v0,11		#$v0 = 11	#Set $vo to print character
	li	$a0,','		#$a0 = ','	#Set $a0 to print ','
	syscall			#Execute
	
	lw	$ra,0($sp)	#Retrieve Return Address from stack
	addi	$sp,$sp,8	#Deallocate 4 bits to stack
	jr	$ra		#Jump back to main

##########################################
# Print_Format(int opcode):  Interpret the format of the instruction.  Print the format type. 
# 
# Calling Sequence:  (on the stack)
#	lw	$a0,opcode
#	sw	$a0, -4($sp)
#	jal	PrtFormat
#
# Returns: $v0=Format type as a code
#
# Stack Usage: (You specify)
#	0($sp) = Return Address
#	4($sp) = Opcode
##########################################
PrtFormat:

	addi	$sp,$sp,-8	#Allocate 4 bits to stack
	sw	$ra,0($sp)	#Save Return Address to 0($sp)
	sw	$a0,4($sp)	#Save opcode to 4($sp)
	
	move	$s1,$a0		#Contents of $a0 move into $s1
	
#	andi	$t1,$s1,0x7f	#Executes ANDI with code and 7 rightmost bits and loads it into $t1


Rformat:
	
#	andi	$t1,
#	move	$a0,$t1		#Move contents of $t1 into $a0
#	jal	Decode		#Jump to Decode
#	beq	$t2,0x33,Rinst	#If $t2 = 0x33, branch to Rinst
	
#	andi	$t3,$s1,0x13	#$t3 = $t1 ANDi 0x13	#Isolate opcode (last 7 bits) and store in $t3	
#	beq	$t3,0x13,Iinst	#If $t3 = 0x13, branch to Iinst
		
#	andi	$t5,$s1,0x23	#$t5 = $t1 ANDI 0x23	#Isolate opcode (last 7 bits) and store in $t5
#	beq	$t5,0x23,Sinst	#If $t5 = 0x23, branch to Sinst
	
#	andi	$t4,$s1,0x03	#$t3 = $t1 ANDi 0x13	#Isolate opcode (last 7 bits) and store in $t3	
#	beq	$t4,0x03,Iinst	#If $t3 = 0x13, branch to Iinst

	lw	$ra,0($sp)	#Retrieve Return Address from stack
	addi	$sp,$sp,8	#Deallocate 4 bits to stack
	jr	$ra		#Jump back to loop
